# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HlDq68ekITQpZpHV8jQi7LevQ4Ni5MG3
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("/content/diabetes_012_health_indicators_BRFSS2015.csv")

df.head()

st.title("Diabetes Prediction")

st.subheader("Training Data")
st.write(df.describe())

st.subheader("Visualization")
st.bar_chart(df)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Separate features (X) and target (y)
x = df.drop('Diabetes_012', axis=1)  # Features
y = df['Diabetes_012']  # Target (0 = No, 1 = Yes)

x_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

def user_report():
  Age=st.slider("Age",18,100,30)
  Sex=st.selectbox("Gender",['Male','Female','other'])
  HighBP=st.slider("HighBP",0,1,0)
  HighChol=st.slider("HighChol",0,1,0)
  CholCheck=st.slider("CholCheck",0,1,0)
  BMI=st.slider("BMI",10,50,20)
  Smoker=st.slider("Smoker",0,1,0)
  Stroke=st.slider("Stroke",0,1,0)
  HeartDiseaseorAttack=st.slider("HeartDiseaseorAttack",0,1,0)
  PhysActivity=st.slider("PhysActivity",0,1,0)
  GenHlth=st.slider("GenHlth",1,5,2)
  MentHlth=st.slider("MentHlth",0,30,10)
  PhysHlth=st.slider("PhysHlth",0,30,10)
  Education=st.slider("Education",1,5,2)
  Income=st.slider("Income",1,8,3)
  DiffWalk=st.slider("DiffWalk",0,1,0)
  Fruits=st.slider("Fruits",0,1,0)
  Veggies=st.slider("Veggies",0,1,0)
  HvyAlcoholConsump=st.slider("HvyAlcoholConsump",0,1,0)

  user_data = {
    'Age':Age,
    'Sex':Sex,
    'HighBP':HighBP,
    'HighChol':HighChol,
    'CholCheck':CholCheck,
    'BMI':BMI,
    'Smoker':Smoker,
    'Stroke':Stroke,
    'HeartDiseaseorAttack':HeartDiseaseorAttack,
    'PhysActivity':PhysActivity,
    'GenHlth':GenHlth,
    'MentHlth':MentHlth,
    'PhysHlth':PhysHlth,
    'Education':Education,
    'Income':Income,
    'DiffWalk':DiffWalk,
    'Fruits':Fruits,
    'Veggies':Veggies,
    'HvyAlcoholConsump':HvyAlcoholConsump
  }
  report_data=pd.DataFrame(user_data,index=[0])
  return report_data

user_data = user_report()

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)

st.subheader('Accuracy: ')
st.write(str(accuracy_score(y_test,rf.predict(X_test))*100)+'%')

# Convert user_report_data dictionary to a pandas DataFrame
# Assuming user_report_data is the variable holding the dictionary from user_report()
user_data_df = pd.DataFrame([user_report_data])

# Convert 'Sex' column to numerical (assuming 0 for Female, 1 for Male, handle 'other')
# Based on df.head() output, Sex seems to be 0.0 and 1.0.
# Assuming 0.0 is Female and 1.0 is Male based on common datasets.
user_data_df['Sex'] = user_data_df['Sex'].apply(lambda x: 1.0 if x == 'Male' else (0.0 if x == 'Female' else np.nan)) # Handle 'other' as NaN for now

# Create a new DataFrame with all columns from x_train, initialized with zeros
user_data_aligned = pd.DataFrame(0.0, index=[0], columns=x_train.columns)

# Update the aligned DataFrame with the user's input data where columns match
for col in user_data_df.columns:
    if col in user_data_aligned.columns:
        user_data_aligned[col] = user_data_df[col]

# Reindex user_data_aligned to explicitly match the columns of x_train
user_data_aligned = user_data_aligned.reindex(columns=x_train.columns, fill_value=0.0)

# Ensure no NaNs remain after reindexing, fill with 0.0 or mean as appropriate
user_data_aligned.fillna(0.0, inplace=True)


user_result = rf.predict(user_data_aligned)

if user_result[0] == 1:
  output=("Prediction: Likely to have diabetes")
else :
  output=("Prediction: Not Likely to have diabetes")

st.write(output)